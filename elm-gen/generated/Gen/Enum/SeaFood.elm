module Gen.Enum.SeaFood exposing (..)

{-| Module generated by [Elm-Gen](https://orasund.github.io/elm-gen).

This module contains the SeaFood Enum.

    type SeaFood
        = Crab
        | Fish
        | Octopus
        | Lobster


# Basics

@docs SeaFood, asList, first, next, prev, last


# Converters

@docs toInt, fromInt, toString, fromString


-}

import Array exposing (Array)

-- This is a generated file. DO NOT CHANGE ANYTHING IN HERE.

-------------------------------------------------------------------------------
-- BASICS
-------------------------------------------------------------------------------

{-| SeaFood type.
-}
type SeaFood
   = Crab
   | Fish
   | Octopus
   | Lobster


{-| Lists all possible values of SeaFood

    asList : List SeaFood
    asList =
        [ Crab
        , Fish
        , Octopus
        , Lobster
        ]

-}
asList : List SeaFood
asList =
    [ Crab
    , Fish
    , Octopus
    , Lobster
    ]

{-| Get the first constructor of the SeaFood

    first : SeaFood
    first =
        Crab

-}
first : SeaFood
first =
    Crab

{-| Get the next SeaFood.

Returns Nothing if its the last
-}
next : SeaFood -> Maybe SeaFood
next seaFood =
    seaFood
        |> toInt
        |> (+) 1
        |> fromInt
        

{-| Get the next SeaFood.

Returns Nothing if its the first
-}
prev : SeaFood -> Maybe SeaFood
prev seaFood =
    seaFood
        |> toInt
        |> (+) -1
        |> fromInt
        

{-| Get the last constructor of the SeaFood

    last : SeaFood
    last =
        Lobster

-}
last : SeaFood
last =
    Lobster

-------------------------------------------------------------------------------
-- CONVERTERS
-------------------------------------------------------------------------------


{-| Convert `SeaFood` into `Int`.

    toInt : SeaFood -> Int
    toInt arg =
        case arg of
            Crab -> 
                0
            Fish -> 
                1
            Octopus -> 
                2
            Lobster -> 
                3

If you need to convert all values of SeaFood into ints, use `asList` instead.

    asList |> List.indexedMap (\i _ -> i)
        --> asList |> List.map toInt

-}
toInt : SeaFood -> Int
toInt seaFood =
    case seaFood of
        Crab -> 
            0
        Fish -> 
            1
        Octopus -> 
            2
        Lobster -> 
            3

{-| Convert `Int` into `SeaFood`

Returns `Nothing` if the values is out of bounds.

    fromInt : Int -> Maybe SeaFood
    fromInt int =
        case int of
            0 -> 
                Just Crab 
            1 -> 
                Just Fish 
            2 -> 
                Just Octopus 
            3 -> 
                Just Lobster 
            _ -> 
                Nothing

-}
fromInt : Int -> Maybe SeaFood
fromInt int =
    case int of
        0 -> 
            Just Crab 
        1 -> 
            Just Fish 
        2 -> 
            Just Octopus 
        3 -> 
            Just Lobster 
        _ -> 
            Nothing
    
{-| Convert SeaFood into String

    toString : SeaFood -> String
    toString arg =
        case arg of
            Crab -> 
                "Crab"
            Fish -> 
                "Fish"
            Octopus -> 
                "Octopus"
            Lobster -> 
                "Lobster"

-}
toString : SeaFood -> String
toString seaFood =
    case seaFood of
        Crab -> 
            "Crab"
        Fish -> 
            "Fish"
        Octopus -> 
            "Octopus"
        Lobster -> 
            "Lobster"

{-| Convert a String into a SeaFood

Returns Nothing if the string is not valid.

    fromString : String -> Maybe SeaFood
    fromString arg =
        case arg of
            "Crab" -> 
                Just Crab 
            "Fish" -> 
                Just Fish 
            "Octopus" -> 
                Just Octopus 
            "Lobster" -> 
                Just Lobster 
            _ -> 
                Nothing
-}
fromString : String -> Maybe SeaFood
fromString string =
    case string of
        "Crab" -> 
            Just Crab 
        "Fish" -> 
            Just Fish 
        "Octopus" -> 
            Just Octopus 
        "Lobster" -> 
            Just Lobster 
        _ -> 
            Nothing




-- Generated with [Elm-Gen](https://orasund.github.io/elm-gen) Version 0.0.1