module Gen.Enum.Stone exposing (..)

{-| Module generated by [Elm-Gen](https://orasund.github.io/elm-gen).

This module contains the Stone Enum.

    type Stone
        = Limestone


# Basics

@docs Stone, asList, first, next, prev, last


# Converters

@docs toInt, fromInt, toString, fromString


-}

import Array exposing (Array)

-- This is a generated file. DO NOT CHANGE ANYTHING IN HERE.

-------------------------------------------------------------------------------
-- BASICS
-------------------------------------------------------------------------------

{-| Stone type.
-}
type Stone
   = Limestone


{-| Lists all possible values of Stone

    asList : List Stone
    asList =
        [ Limestone
        ]

-}
asList : List Stone
asList =
    [ Limestone
    ]

{-| Get the first constructor of the Stone

    first : Stone
    first =
        Limestone

-}
first : Stone
first =
    Limestone

{-| Get the next Stone.

Returns Nothing if its the last
-}
next : Stone -> Maybe Stone
next stone =
    stone
        |> toInt
        |> (+) 1
        |> fromInt
        

{-| Get the next Stone.

Returns Nothing if its the first
-}
prev : Stone -> Maybe Stone
prev stone =
    stone
        |> toInt
        |> (+) -1
        |> fromInt
        

{-| Get the last constructor of the Stone

    last : Stone
    last =
        Limestone

-}
last : Stone
last =
    Limestone

-------------------------------------------------------------------------------
-- CONVERTERS
-------------------------------------------------------------------------------


{-| Convert `Stone` into `Int`.

    toInt : Stone -> Int
    toInt arg =
        case arg of
            Limestone -> 
                0

If you need to convert all values of Stone into ints, use `asList` instead.

    asList |> List.indexedMap (\i _ -> i)
        --> asList |> List.map toInt

-}
toInt : Stone -> Int
toInt stone =
    case stone of
        Limestone -> 
            0

{-| Convert `Int` into `Stone`

Returns `Nothing` if the values is out of bounds.

    fromInt : Int -> Maybe Stone
    fromInt int =
        case int of
            0 -> 
                Just Limestone 
            _ -> 
                Nothing

-}
fromInt : Int -> Maybe Stone
fromInt int =
    case int of
        0 -> 
            Just Limestone 
        _ -> 
            Nothing
    
{-| Convert Stone into String

    toString : Stone -> String
    toString arg =
        case arg of
            Limestone -> 
                "Limestone"

-}
toString : Stone -> String
toString stone =
    case stone of
        Limestone -> 
            "Limestone"

{-| Convert a String into a Stone

Returns Nothing if the string is not valid.

    fromString : String -> Maybe Stone
    fromString arg =
        case arg of
            "Limestone" -> 
                Just Limestone 
            _ -> 
                Nothing
-}
fromString : String -> Maybe Stone
fromString string =
    case string of
        "Limestone" -> 
            Just Limestone 
        _ -> 
            Nothing




-- Generated with [Elm-Gen](https://orasund.github.io/elm-gen) Version 0.0.1