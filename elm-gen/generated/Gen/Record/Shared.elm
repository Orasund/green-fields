module Gen.Record.Shared exposing (..)

{-| Module generated by [Elm-Gen](https://orasund.github.io/elm-gen).

Module generated by [Elm-Gen](https://orasund.github.io/elm-gen).

This module contains the Shared Record.

    type alias Shared =
        { dice : DiceBag
        , money : Int
        , seed : Seed
        , food : AnyBag String Food
        , stone : AnyBag String Stone
        , fields : Array (Maybe Vegetable)
        , fishingPool : (SeaFood,List SeaFood)
        }


# Type

@docs Shared


# Getter

@docs getDice, getMoney, getSeed, getFood, getStone, getFields, getFishingPool


# Setter

@docs setDice, setMoney, setSeed, setFood, setStone, setFields, setFishingPool


# Mapper

@docs mapDice, mapMoney, mapSeed, mapFood, mapStone, mapFields, mapFishingPool




-}

import Data.DiceBag exposing (DiceBag)
import Random exposing (Seed)
import Data.AnyBag exposing (AnyBag)
import Data.Food exposing (Food)
import Data.Food.Vegetable exposing (Vegetable)
import Data.Stone exposing (Stone)
import Array exposing (Array)
import Data.Food.SeaFood exposing (SeaFood)



-- This is a generated file. DO NOT CHANGE ANYTHING IN HERE.

-------------------------------------------------------------------------------
-- TYPE
-------------------------------------------------------------------------------

{-| Shared record
-}
type alias Shared =
    { dice : DiceBag
    , money : Int
    , seed : Seed
    , food : AnyBag String Food
    , stone : AnyBag String Stone
    , fields : Array (Maybe Vegetable)
    , fishingPool : (SeaFood,List SeaFood)
    }



-------------------------------------------------------------------------------
-- GETTER
-------------------------------------------------------------------------------


{-| Get the value of the dice field.

    getDice : Shared -> DiceBag
    getDice =
        .dice

-}
getDice : Shared -> DiceBag
getDice =
    .dice


{-| Get the value of the money field.

    getMoney : Shared -> Int
    getMoney =
        .money

-}
getMoney : Shared -> Int
getMoney =
    .money


{-| Get the value of the seed field.

    getSeed : Shared -> Seed
    getSeed =
        .seed

-}
getSeed : Shared -> Seed
getSeed =
    .seed


{-| Get the value of the food field.

    getFood : Shared -> AnyBag String Food
    getFood =
        .food

-}
getFood : Shared -> AnyBag String Food
getFood =
    .food


{-| Get the value of the stone field.

    getStone : Shared -> AnyBag String Stone
    getStone =
        .stone

-}
getStone : Shared -> AnyBag String Stone
getStone =
    .stone


{-| Get the value of the fields field.

    getFields : Shared -> Array (Maybe Vegetable)
    getFields =
        .fields

-}
getFields : Shared -> Array (Maybe Vegetable)
getFields =
    .fields


{-| Get the value of the fishingPool field.

    getFishingPool : Shared -> (SeaFood,List SeaFood)
    getFishingPool =
        .fishingPool

-}
getFishingPool : Shared -> (SeaFood,List SeaFood)
getFishingPool =
    .fishingPool




-------------------------------------------------------------------------------
-- SETTER
-------------------------------------------------------------------------------


{-| Set the value of the dice field.

    setDice : DiceBag -> Shared -> Shared
    setDice dice shared =
        { shared | dice = dice }

-}
setDice : DiceBag -> Shared -> Shared
setDice dice shared =
    { shared | dice = dice }


{-| Set the value of the money field.

    setMoney : Int -> Shared -> Shared
    setMoney money shared =
        { shared | money = money }

-}
setMoney : Int -> Shared -> Shared
setMoney money shared =
    { shared | money = money }


{-| Set the value of the seed field.

    setSeed : Seed -> Shared -> Shared
    setSeed seed shared =
        { shared | seed = seed }

-}
setSeed : Seed -> Shared -> Shared
setSeed seed shared =
    { shared | seed = seed }


{-| Set the value of the food field.

    setFood : AnyBag String Food -> Shared -> Shared
    setFood food shared =
        { shared | food = food }

-}
setFood : AnyBag String Food -> Shared -> Shared
setFood food shared =
    { shared | food = food }


{-| Set the value of the stone field.

    setStone : AnyBag String Stone -> Shared -> Shared
    setStone stone shared =
        { shared | stone = stone }

-}
setStone : AnyBag String Stone -> Shared -> Shared
setStone stone shared =
    { shared | stone = stone }


{-| Set the value of the fields field.

    setFields : Array (Maybe Vegetable) -> Shared -> Shared
    setFields fields shared =
        { shared | fields = fields }

-}
setFields : Array (Maybe Vegetable) -> Shared -> Shared
setFields fields shared =
    { shared | fields = fields }


{-| Set the value of the fishingPool field.

    setFishingPool : (SeaFood,List SeaFood) -> Shared -> Shared
    setFishingPool fishingPool shared =
        { shared | fishingPool = fishingPool }

-}
setFishingPool : (SeaFood,List SeaFood) -> Shared -> Shared
setFishingPool fishingPool shared =
    { shared | fishingPool = fishingPool }



-------------------------------------------------------------------------------
-- MAPPER
-------------------------------------------------------------------------------


{-| Map the value of the dice field.

    mapDice : (DiceBag -> DiceBag) -> Shared -> Shared
    mapDice fun shared =
        { shared | dice = fun shared.dice }

-}
mapDice : (DiceBag -> DiceBag) -> Shared -> Shared
mapDice fun shared =
    { shared | dice = fun shared.dice }


{-| Map the value of the money field.

    mapMoney : (Int -> Int) -> Shared -> Shared
    mapMoney fun shared =
        { shared | money = fun shared.money }

-}
mapMoney : (Int -> Int) -> Shared -> Shared
mapMoney fun shared =
    { shared | money = fun shared.money }


{-| Map the value of the seed field.

    mapSeed : (Seed -> Seed) -> Shared -> Shared
    mapSeed fun shared =
        { shared | seed = fun shared.seed }

-}
mapSeed : (Seed -> Seed) -> Shared -> Shared
mapSeed fun shared =
    { shared | seed = fun shared.seed }


{-| Map the value of the food field.

    mapFood : (AnyBag String Food -> AnyBag String Food) -> Shared -> Shared
    mapFood fun shared =
        { shared | food = fun shared.food }

-}
mapFood : (AnyBag String Food -> AnyBag String Food) -> Shared -> Shared
mapFood fun shared =
    { shared | food = fun shared.food }


{-| Map the value of the stone field.

    mapStone : (AnyBag String Stone -> AnyBag String Stone) -> Shared -> Shared
    mapStone fun shared =
        { shared | stone = fun shared.stone }

-}
mapStone : (AnyBag String Stone -> AnyBag String Stone) -> Shared -> Shared
mapStone fun shared =
    { shared | stone = fun shared.stone }


{-| Map the value of the fields field.

    mapFields : (Array (Maybe Vegetable) -> Array (Maybe Vegetable)) -> Shared -> Shared
    mapFields fun shared =
        { shared | fields = fun shared.fields }

-}
mapFields : (Array (Maybe Vegetable) -> Array (Maybe Vegetable)) -> Shared -> Shared
mapFields fun shared =
    { shared | fields = fun shared.fields }


{-| Map the value of the fishingPool field.

    mapFishingPool : ((SeaFood,List SeaFood) -> (SeaFood,List SeaFood)) -> Shared -> Shared
    mapFishingPool fun shared =
        { shared | fishingPool = fun shared.fishingPool }

-}
mapFishingPool : ((SeaFood,List SeaFood) -> (SeaFood,List SeaFood)) -> Shared -> Shared
mapFishingPool fun shared =
    { shared | fishingPool = fun shared.fishingPool }






-- Generated with [Elm-Gen](https://orasund.github.io/elm-gen) Version 0.0.1